Things to do before initializing the server

1. Create a new folder which will contain the server

2. In your terminal type "yarn init -y" or "npm init -y". It will create a package.json file

3. Create the src folder containing the server.ts file. This file will be the most important
concerning the server. Note that nodeJS does not understand typescript.

4. Install the TypeScript: in your terminal, type "yarn add typescript -D" or
"npm install typescript -D".

5. Create the configuration file for the TypeScript. For this, run "yarn tsc --init" or 
"npx tsc --init". A tsconfig.json will be generated.

6. In the tsconfig.json file, change the "target" value to "es2017" or other that your
environment understands.

7. Install another dependency by running "yarn add ts-node-dev -D" or "npm install ts-node-dev -D".
This dependency will allow us to use node and typescript and will help us automate the process of 
reloading files if there is any change inside the server files.

8. In your package.json file, type this new property:
"scripts": {
    "start": "tsnd src/server.ts"
}

Note: "tsnd" or "ts-node-dev". 

9. Add the flag "--transpile-only" after "tsnd" in package.json. This will only convert TypeScript
into JavaScript and will improve the time execution of our application because it will not care 
about code errors anymore (this functionality stays with TypeScript).

10. Add the flag "--ignore-watch node_modules" after "--transpile-only" in package.json.
This will stop TypeScript converting codes from node_modules into JavaScript.

11. Then, add also the flag "--respawn" after "--ignore-watch node_modules".
This will make the server continue to run until we tell it to stop.

12. Install express by running "yarn add expresss" or "npm install express" in the terminal.

13. If you get an error by importing the TypeScript in your main server file, follow the
recomendation of VSCode running "yarn add  @types/express -D" or "npm install @types/express -D"

14. Starting the server:

    14.1 - Importing express
    import express from 'express';

    14.2 - Store the express function in the main variable app
    const app = express();

    14.3 - Add the method to listen HTTP requirements
    app.listen(3333); // localhost:3333 (The argument is the port)

15. .get() method. An HTTP method.

16. Inside the get method, define the route. The user access the first parameter, 
then, the application executes the second argument:

    app.get('/users',
        (request, response) => {
            return response.json("Hello World!");
        }
    )

    Note that here we return the response in the json format.

    Some other HTTP methods:
    .get(): bring/get an information
    .post(): create any new information inside the back-end
    .put(): update/edit an existing information
    .delete(): delete an existing information

    Some parameters
        1. Query params: they are send in the route by a question mark (?) and they
        are concatenated by "&". It is used to do some search, filter, "paginação"
            http://localhost:3333/aresource?paramname=paramvalue
            > In JS/TS code: request.query
        
        2.Route params: used to identify a resource. For example, consider
             http://localhost:3333/users/1 (we identify the user with id 1. It is quite useful
             if we want to update or delete this user).
        To use this parameter we must put "/:nameofparameter" at the end of the
        resource.
            > In JS/TS code: request.params

        3. Body: all the information which is sent in a request. Generally it is composed 
        by a large amount of data. It is quite useful in a register form (username, email, address,
        password, birth etc), for example.
            > In JS/TS code: request.body

17. Install Insomnia Core to be able to work with other HTTP methods like POST,
PUT and DELETE.

18. With Insomnia, we test the Request Body with the POST method.
 Request Body: data for the creation or update of a register.

19. However, even with Insomnia, if we send, for example this data:
    
    {
        "name": "Dani",
        "age": "23"
    }

in the request body, the console.log of this code

    app.post('/users',
        (request, response) => {
            console.log(request.body);
            //Test: send an array
            const users = [
                {name: "Diego", age: 32},
                {name: "John", age: 25}
            ];

            return response.json(users);
        }
    )

will return "undefined". That's because the express does not understand the json format.

20. For this, add this line after defining the app variable
    app.use(express.json());
    Other parameters besides Request Body are:
    - Route Params: identify which resource (.../users, for example) we want to update or delete.
        Use:
            app.delete('/users/:id',
                (request, response) => {
                    console.log(request.params);
                    //Test: send an array
                    const users = [
                        {name: "Diego", age: 32},
                        {name: "John`", age: 25}
                    ];

                    return response.json(users);
                }
            )
        - Query Params: list data, filter, organization. (There must be some exclamation marks
        in the URL of the request)
        Use:
            app.get('/users/',
                (request, response) => {
                    console.log(request.query);
                    const users = [
                        {name: "Diego", age: 32},
                        {name: "John`", age: 25}
                    ]
                    return response.json(users);
                }
            )
        

21. Install typeorm and sqlite3.
There are three ways to use a 
database in an application:

    1. Native drivers:
    -> No level of abstraction: you write the SQL language
    itself
        Example:
        sqlite3.query("SELECT * FROM users");

    2. Query builder (KnexJS)
    -> More abstraction: we write
    the queries with JavaScript.
        
        Example:
        knex("users").select("*").where("name", "Josh");
        
        This constructs:
        SELECT * FROM users WHERE name = Josh;

    3. Object Relational Mapping (ORM)
    -> The highest level of abstraction. Each table
    is equivalent to a JavaScript class. We call these 
    classes "models".
    Each SELECT made is an object of the JavaScript
    class.

22. Create a folder and a file inside it for the database.

23. Create a configuration file called ormconfig.json to establish
the configuration connection with the database and type:
    "type": "sqlite",
    "database": "./src/database/database.sqlite"

24. Create a file called 'connection' inside the database folder and inside it, 
type

    import { createConnection } from 'typeorm';

    createConnection();

25. Import the file of the last step in the server file.

26. Now we are going to use migrations, a kind of 
version control of the databases. It contains the 
instructions to what must be done in a database given
an operation. Inside the database folder, create
another folder called "migrations".

27. Now we must tell the yarn typeorm command to understand TypeScript.
For this, in the package.json file, add the following custom command (scripts):
    "typeorm": "ts-node-dev ./node_modules/typeorm/cli.js"

28. In your ormconfig.json, add these two new properties:

    // What are the migrations files
    "migrations": [
        "./src/database/migrations/*.ts"
    ],
    // Where the migrations will be created
    "cli": {
       "migrationsDir": "./src/database/migrations" 
    }

29. You can run the following code in your terminal to create the first migration:

    yarn typeorm migration:create -n create_orphanages

    (-n: name, create_orphanages: the chosen name)

30. After creating a migration (see the one about creating a table), type the following command
to execute the migration:
    yarn typeorm migration:run

Note: to undo a migration, use the command 
    yarn typeorm migration:revert

31. Use the open source software beekeeper studio to visualize the created table.

32. It's time to create the JavaScript class models for the tables. For this create a folder
inside "src" called "models". 

33. Then, create "Orphanage.ts" to start to create a class. Type the class:

        export default class Orphanage {

            id: number;

            name: string;

            latitude: number;

            longitude: number;

            about: string;

            instructions: string;

            opening_hours: string;

            open_on_weekends: boolean;

        }

34. You will see that error appears. For this, we will have to change our tsconfig.json file.
Find the "strictPropertyInitialization" property, uncomment it and change its value to false.

    "strictPropertyInitialization": false

With this we can define variables in the class without values.

35. Next we need to uncomment two properties to enable the decorator API of TypeScript (tsconfig.json):
    "experimentalDecorators": true, 
    "emitDecoratorMetadata": true,

36. Add this before your class definition (Orphanage)

    import { Entity, Column, PrimaryGeneratedColumn} from 'typeorm';

Decorators are used in classes, properties and functions.

37. Use the decorator like this:
    
    @Entity("orphanages")

    right before your class definition. Then, typeorm will automatically understand that
    it this class is related to the table "orphanages".

38. Write the decorators to the properties, like this:

@Entity("orphanages")
export default class Orphanage {

    @PrimaryGeneratedColumn("increment") // The id property is the primary column in the database automatically incremented
    id: number;

    @Column() // The name property is a column in the database
    name: string;

    @Column()
    latitude: number;

    @Column()
    longitude: number;

    @Column()
    about: string;

    @Column()
    instructions: string;

    @Column()
    opening_hours: string;

    @Column()
    open_on_weekends: boolean;

}

39. Now we have to create a route to create an orphanage.
The first thing to do is to write some test data and pass
it to the server (through Insomnia) in the request body.

40. Then, we add these following two lines at the beginning of the server file:
    
    // All the operations that we want to do in a database must pass in repository,
    which contains all the rules.
    import { getRepository } from "typeorm";

    // Import the model
    import Orphanage from './models/Orphanage';

41. Add the following lines inside the server function. Note that this function must now be
async.

    const orphanagesRepository = getRepository(Orphanage);
        
    const orphanage = orphanagesRepository.create(
           
            {

                name,

                latitude,
                
                longitude,
                
                about,
                
                instructions,
                
                opening_hours,
                
                open_on_weekends

            }

        );

        // Save in the database
        await orphanagesRepository.save(orphanage);

42. Add a new property to the configuration
file so that the typeorm can find where are
the entities/models.

43. Let's better organize the API. Create a
separate file for the routes.

44. Pass all the route which was created ing the 
server file, import the orm things and import the Router from express:

    import { Router } from 'express';

    import { getRepository } from "typeorm";

    import Orphanage from './models/Orphanage';

    const routes = Router();

    routes.post(

    "/orphanages", 

    async (request, response) => {

        const {
            
            name, // name: name

            latitude,
            
            longitude,
            
            about,
            
            instructions,
            
            opening_hours,
            
            open_on_weekends
        
        } = request.body;

        const orphanagesRepository = getRepository(Orphanage);
        
        const orphanage = orphanagesRepository.create(
           
            {

                name,

                latitude,
                
                longitude,
                
                about,
                
                instructions,
                
                opening_hours,
                
                open_on_weekends

            }

        );

        await orphanagesRepository.save(orphanage);

        // 201: Code which indicates something was
        // created.
        return response.status(201).json(orphanage);

    }

);

export default routes;

45. Import these routes in your server.ts file and make the app use the routes:
    app.use(routes);

46. Let's organize it even better: create another folder called controllers and inside it,
a file called "OrphanagesController.ts" and inside it, export an object whose function "create"
has all the functionality of creating a new orphanage. That is:

    import { getRepository } from "typeorm";

    import Orphanage from '../models/Orphanage';

    export default {
        
        async create(request, response) {
            
            const {
                
                name, // name: name

                latitude,
                
                longitude,
                
                about,
                
                instructions,
                
                opening_hours,
                
                open_on_weekends
            
            } = request.body;

            const orphanagesRepository = getRepository(Orphanage);
            
            const orphanage = orphanagesRepository.create(
                
                {

                    name,

                    latitude,
                    
                    longitude,
                    
                    about,
                    
                    instructions,
                    
                    opening_hours,
                    
                    open_on_weekends

                }

            );

            await orphanagesRepository.save(orphanage);

            // 201: Code which indicates something was
            // created.
            return response.status(201).json(orphanage);

        }
        
    };

47. Now the problem is that TypeScript doesn't know what is request and response. To solve this,
we must import them from express
    import { Request, Response } from 'express';

48. Now import the OrphanagesController in the routes:
    import OrphanagesController from './controllers/OrphanagesController';

49. Execute the OrphanagesController.create function inside the post method of the routes:
    routes.post("/orphanages", OrphanagesController.create);

50. Now we proceed in the OrphanagesController object to create a method to list the orphanages
(index method) reapeating the previous step to make its corresponding route.

    // In the controller file:
    async index(request: Request, response: Response) {

        const orphanagesRepository = getRepository(Orphanage);
        
        const orphanages = await orphanagesRepository.find();

        return response.json(orphanages);

    },

    // In the routes file
    routes.get("/orphanages", OrphanagesController.index);


51. After creating migrations for the image table and executing it, we install
a library called "multer" to deal with upload files.

52. Inside the "src" folder, create a another called "config" and inside it, a file
called "upload.ts".
    Code in upload.ts:
    
    import multer from 'multer';

    // To add with path folders (from node)
    import path from "path";

    // See the documentation of multer for more explanations

    export default {

        storage: multer.diskStorage(

            {
            
                destination: path.join(__dirname, "..", "..", "uploads"),

                filename: (request, file, cb) => {

                    // Changing the fileName to reduce the possibility of two equal names
                    const fileName = `${Date.now()}-${file.originalname}`;

                    // As no error is expected, we pass null as the first parameter
                    cb(null, fileName);

                }
            
            }
        
        )

    };

53. Now we must add some more code to the routes file:
    import multer from 'multer';

    import uploadConfig from './config/upload';

    const upload = multer(uploadConfig);

    // Add a second parameter (upload.array) to the following route:
    routes.post("/orphanages", upload.array("images"), OrphanagesController.create);

54. With this, the uploads should be working, although the images are not being saved in the
database. Note now, that the request body cannot be a JSON file anymore, but a Multipart Form
instead.

55. To register the images in the database, create a model for the image. And in the
Orphanage.ts model, import a function called OneToMany (One orphanage to Many images). 

56. Still in the Orphanage.ts model, import the Orphanage model and
add this inside the class:
    
    @OneToMany(() => Image, image => image.orphanages)
    images: Image[];

57. Now we must do the inverse relationship in the Image class file: import a function
called ManyToOne, JoinColumn and the Orphanage class and make the inverse process:

    @ManyToOne(()=> Orphanage, orphanage => orphanage.images)
    @JoinColumn({ name: "orphanage_id" })
    orphanage: Orphanage;

58. In "OneToMany" , add this third parameter which will deal with the automatic insertion
and update of the related images:
        
        {
            // This will automatically insert and update the associated images
            cascade:["insert", "update"]
        }

59. Now we must add the functionality of adding the image in the controller.
Add this in the create method:

        // A little hack to force it to be of an array type
        const requestImages = request.files as Express.Multer.File[];

        const images = requestImages.map(
            image => {
                return { path: image.filename}
            }
        );

And add 
 
    images

inside the orphanage const

60. Now, inside the arguments of the find methods, inside  "index" and "show"
functions in the Controller, add the following parameter:
    {
        relations: ["images"]
    }

61. Create a views folder. Inside it there will be all files which handle how the data
will be visualized by the front-end. Note also that we need to give more information
to display the images.
